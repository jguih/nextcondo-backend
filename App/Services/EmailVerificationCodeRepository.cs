using Microsoft.EntityFrameworkCore;
using NextCondoApi.Entity;
using System.Security.Cryptography;

namespace NextCondoApi.Services;

public interface IEmailVerificationCodeRepository : IGenericRepository<EmailVerificationCode> 
{
    /// <summary>
    /// Creates a verification code that can be sent to the user by email.
    /// Code is a 8 lenght string of alphanumeric digits.
    /// </summary>
    /// <param name="userId">The user's Id</param>
    /// <param name="email">The user's email address</param>
    /// <returns>Code as string</returns>
    public Task<string> CreateCodeAsync(Guid userId, string email);
    /// <summary>
    /// Verify the validity of the code generated by CreateCode sent to the user.
    /// </summary>
    /// <param name="userId">Users's Id</param>
    /// <param name="email">User's email address</param>
    /// <param name="code">Code created by CreateCode</param>
    /// <returns>Boolean indicating whether the code is valid or not</returns>
    public Task<bool> VerifyCodeAsync(Guid userId, string email, string code);
    public bool IsCodeExpired(EmailVerificationCode emailCode);
}

public class EmailVerificationCodeRepository : GenericRepository<EmailVerificationCode>, IEmailVerificationCodeRepository
{
    public EmailVerificationCodeRepository(
        NextCondoApiDbContext context, 
        ILogger<GenericRepository<EmailVerificationCode>> logger) 
        : base(context, logger)
    {
    }

    public async Task<string> CreateCodeAsync(Guid userId, string email)
    {
        await (from emailCode in entities
               where emailCode.UserId == userId
               select emailCode)
               .ExecuteDeleteAsync();
        var code = RandomNumberGenerator.GetString("ABCDEFGHIJKLMNOPQRSTUVXWYZ0123456789", 8);
        await AddAsync(new EmailVerificationCode()
        {
            UserId = userId,
            Email = email,
            Code = code,
            ExpirestAt = DateTime.UtcNow.AddMinutes(15)
        });
        return code;
    }

    public async Task<bool> VerifyCodeAsync(Guid userId, string email, string code)
    {
        var existingCode = await (from emailCode in entities
                                  where emailCode.UserId == userId
                                  select emailCode)
                                  .AsNoTracking()
                                  .FirstOrDefaultAsync();

        if (existingCode == null || !existingCode.Code.Equals(code))
        {
            return false;
        }

        await (from emailCode in entities
               where emailCode.Id == existingCode.Id
               select emailCode)
               .ExecuteDeleteAsync();

        if (IsCodeExpired(existingCode))
        {
            return false;
        }

        if (!existingCode.Email.Equals(email))
        {
            return false;
        }

        return true;
    }

    public bool IsCodeExpired(EmailVerificationCode emailCode)
    {
        return DateTimeOffset.UtcNow.CompareTo(emailCode.ExpirestAt) > 0;
    }
}
